{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../util.service\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"@angular/router\";\nexport let ForgetPasswordPage = /*#__PURE__*/(() => {\n  class ForgetPasswordPage {\n    constructor(util, navCtrl, router // Inject Router\n    ) {\n      this.util = util;\n      this.navCtrl = navCtrl;\n      this.router = router;\n      this.email = '';\n      this.loadOTP = false;\n      this.otp = '';\n      this.showOtpInput = false;\n      this.verifyingOtp = false;\n    }\n    ionViewWillEnter() {\n      this.email = '';\n      this.loadOTP = false;\n      this.otp = '';\n      this.showOtpInput = false;\n      this.verifyingOtp = false; // Reset the verifying state on view enter\n    }\n    checkEmail() {\n      if (this.email == '') {\n        this.util.presentToast('Email is required.');\n        return;\n      }\n      const email = this.email;\n      this.util.post('forgetPassword', email).subscribe({\n        next: response => {\n          if (response.status == 'success') {\n            this.loadOTP = true;\n            this.util.presentToast('OTP sent successfully.');\n          } else {\n            this.util.presentToast(response.message || 'Failed to send OTP. Try Again.');\n          }\n        },\n        error: err => {\n          console.error('Error occurred:', err);\n          this.util.presentToast('An error occurred while sending OTP. Try again.');\n        }\n      });\n    }\n    verifyOtp() {\n      if (this.otp == '') {\n        this.util.presentToast('OTP is required.');\n        return;\n      }\n      this.verifyingOtp = true;\n      const data = {\n        user_id: this.email,\n        // Assuming user_id is represented by the email for now\n        otp: this.otp\n      };\n      this.util.post('verifyOtp', data).subscribe({\n        next: response => {\n          // this.verifyingOtp = false;  // Hide the spinner on response\n          if (response.status == 'success') {\n            this.util.presentToast('OTP verified successfully.');\n            this.verifyingOtp = false; // Hide the spinner on response\n            // Redirect to reset password or another page\n            this.router.navigate(['/resetpassword']);\n          } else {\n            this.util.presentToast(response.message || 'Invalid OTP. Please try again.');\n          }\n        },\n        error: err => {\n          this.verifyingOtp = false;\n          console.error('Error occurred:', err);\n          this.util.presentToast('An error occurred while verifying OTP. Try again.');\n        }\n      });\n    }\n    static #_ = (() => this.ɵfac = function ForgetPasswordPage_Factory(t) {\n      return new (t || ForgetPasswordPage)(i0.ɵɵdirectiveInject(i1.UtilService), i0.ɵɵdirectiveInject(i2.NavController), i0.ɵɵdirectiveInject(i3.Router));\n    })();\n    static #_2 = (() => this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ForgetPasswordPage,\n      selectors: [[\"app-forget-password\"]],\n      decls: 9,\n      vars: 2,\n      consts: [[3, \"translucent\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"]],\n      template: function ForgetPasswordPage_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-title\");\n          i0.ɵɵtext(3, \"forgetPassword\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(4, \"ion-content\", 1)(5, \"ion-header\", 2)(6, \"ion-toolbar\")(7, \"ion-title\", 3);\n          i0.ɵɵtext(8, \"forgetPassword\");\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"translucent\", true);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"fullscreen\", true);\n        }\n      },\n      dependencies: [i2.IonContent, i2.IonHeader, i2.IonTitle, i2.IonToolbar]\n    }))();\n  }\n  return ForgetPasswordPage;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { FormGroup, Validators, FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../util.service\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/router\";\nfunction LoginPage_ion_spinner_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ion-spinner\", 18);\n  }\n}\nexport let LoginPage = /*#__PURE__*/(() => {\n  class LoginPage {\n    constructor(util, navCtrl) {\n      this.util = util;\n      this.navCtrl = navCtrl;\n      this.showPassword = false;\n      this.loadLoginData = true;\n      this.loadProfileData = false; // Add this line\n      this.loginForm = new FormGroup({\n        email: new FormControl('', Validators.compose([Validators.required, Validators.email])),\n        password: new FormControl('', Validators.compose([Validators.required])),\n        rememberMe: new FormControl(false)\n      });\n    }\n    ionViewWillEnter() {\n      this.rememberMe();\n      this.loadProfileData = false;\n    }\n    login() {\n      // this.util.showLoading();\n      this.loadProfileData = true; // Show spinner when login starts\n      const loginData = {\n        username: this.loginForm.value.email,\n        password: this.loginForm.value.password\n      };\n      this.util.loginUrl(loginData).subscribe({\n        next: response => {\n          if (response.status == 'success') {\n            this.util.presentToast('Success');\n            console.log('response', response);\n            localStorage.setItem('login', JSON.stringify(response.data));\n            if (this.loginForm.value.rememberMe) {\n              localStorage.setItem('remember', JSON.stringify(this.loginForm.value));\n            } else {\n              localStorage.removeItem('remember');\n            }\n            this.loginForm.reset();\n            this.util.setMenuState(true);\n            this.navCtrl.navigateRoot('/home', {\n              animationDirection: 'forward'\n            });\n          }\n        },\n        error: error => {\n          console.log('LoginFailed', error);\n          this.util.presentToast('Login Failed');\n        },\n        complete: () => {\n          this.loadProfileData = false; // Hide spinner when login completes\n        }\n        // this.loadLoginData=false;\n      });\n    }\n    toggleShowPassword() {\n      this.showPassword = !this.showPassword;\n    }\n    rememberMe() {\n      const rememberUser = JSON.parse(localStorage.getItem('remember') || '[]');\n      if (rememberUser) {\n        this.loginForm.patchValue({\n          email: rememberUser.email,\n          password: rememberUser.password,\n          rememberMe: true\n        });\n      }\n    }\n    static #_ = (() => this.ɵfac = function LoginPage_Factory(t) {\n      return new (t || LoginPage)(i0.ɵɵdirectiveInject(i1.UtilService), i0.ɵɵdirectiveInject(i2.NavController));\n    })();\n    static #_2 = (() => this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LoginPage,\n      selectors: [[\"app-login\"]],\n      decls: 34,\n      vars: 5,\n      consts: [[\"slot\", \"start\"], [\"routerLink\", \"/welcome\", \"routerDirection\", \"back\", 1, \"backbtn\"], [\"src\", \"../../assets/back.svg\"], [1, \"ion-padding\"], [1, \"ion-padding\", \"container\"], [\"color\", \"primary\", 4, \"ngIf\"], [3, \"ngSubmit\", \"formGroup\"], [1, \"form-container\"], [\"position\", \"floating\"], [\"formControlName\", \"email\"], [\"formControlName\", \"password\", 3, \"type\"], [\"slot\", \"end\", 3, \"click\", \"name\"], [\"lines\", \"none\"], [\"formControlName\", \"rememberMe\", \"slot\", \"start\"], [\"color\", \"primary\", \"fill\", \"clear\", \"routerLink\", \"/forget-password\", \"routerDirection\", \"forward\"], [\"expand\", \"block\", \"type\", \"submit\", 1, \"main-button\", 3, \"disabled\"], [1, \"sign-up\"], [\"color\", \"dark\", \"fill\", \"clear\", \"routerLink\", \"/signup\", \"routerDirection\", \"forward\"], [\"color\", \"primary\"]],\n      template: function LoginPage_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-buttons\", 0)(3, \"ion-button\", 1);\n          i0.ɵɵelement(4, \"img\", 2);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(5, \"ion-content\", 3)(6, \"div\", 4)(7, \"h1\");\n          i0.ɵɵtext(8, \"Login\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(9, LoginPage_ion_spinner_9_Template, 1, 0, \"ion-spinner\", 5);\n          i0.ɵɵelementStart(10, \"form\", 6);\n          i0.ɵɵlistener(\"ngSubmit\", function LoginPage_Template_form_ngSubmit_10_listener() {\n            return ctx.login();\n          });\n          i0.ɵɵelementStart(11, \"div\", 7)(12, \"ion-item\")(13, \"ion-label\", 8);\n          i0.ɵɵtext(14, \"Email\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(15, \"ion-input\", 9);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(16, \"ion-item\")(17, \"ion-label\", 8);\n          i0.ɵɵtext(18, \"Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(19, \"ion-input\", 10);\n          i0.ɵɵelementStart(20, \"ion-icon\", 11);\n          i0.ɵɵlistener(\"click\", function LoginPage_Template_ion_icon_click_20_listener() {\n            return ctx.toggleShowPassword();\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(21, \"ion-item\", 12);\n          i0.ɵɵelement(22, \"ion-checkbox\", 13);\n          i0.ɵɵelementStart(23, \"ion-label\");\n          i0.ɵɵtext(24, \"RememberMe\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(25, \"ion-item\", 12)(26, \"ion-button\", 14);\n          i0.ɵɵtext(27, \"Forgot Password?\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(28, \"ion-button\", 15);\n          i0.ɵɵtext(29, \"Log in\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(30, \"div\", 16);\n          i0.ɵɵtext(31, \" Don't have an account? \");\n          i0.ɵɵelementStart(32, \"ion-button\", 17);\n          i0.ɵɵtext(33, \"Sign up\");\n          i0.ɵɵelementEnd()()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"ngIf\", ctx.loadProfileData);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"type\", ctx.showPassword ? \"text\" : \"password\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"name\", ctx.showPassword ? \"eye-outline\" : \"eye-off-outline\");\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid);\n        }\n      },\n      dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatus, i4.NgControlStatusGroup, i2.IonButton, i2.IonButtons, i2.IonCheckbox, i2.IonContent, i2.IonHeader, i2.IonIcon, i2.IonInput, i2.IonItem, i2.IonLabel, i2.IonSpinner, i2.IonToolbar, i2.BooleanValueAccessor, i2.TextValueAccessor, i2.RouterLinkDelegate, i4.FormGroupDirective, i4.FormControlName, i5.RouterLink],\n      styles: [\"ion-toolbar[_ngcontent-%COMP%]{--border-width: 0 !important}.header-md[_ngcontent-%COMP%]:after{background:none!important}.container[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%]{margin-top:0}.backbtn[_ngcontent-%COMP%]{margin-left:20px}.form-container[_ngcontent-%COMP%]{margin-top:48px}.form-container[_ngcontent-%COMP%]   ion-item[_ngcontent-%COMP%]{--padding-start: 0;--border-color: #DADADA}.form-container[_ngcontent-%COMP%]   ion-item[_ngcontent-%COMP%]   ion-label[_ngcontent-%COMP%]{color:#a6a6a6}.form-container[_ngcontent-%COMP%]   ion-item[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%]{margin-top:auto;color:#c6cbd4}.form-container[_ngcontent-%COMP%]   ion-button[_ngcontent-%COMP%]{margin-top:48px}.sign-up[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center}.sign-up[_ngcontent-%COMP%]   ion-button[_ngcontent-%COMP%]{margin:0}\"]\n    }))();\n  }\n  return LoginPage;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
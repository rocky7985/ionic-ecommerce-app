{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../util.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@ionic/angular\";\nfunction ResetpasswordPage_ion_spinner_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ion-spinner\", 7);\n  }\n}\nexport let ResetpasswordPage = /*#__PURE__*/(() => {\n  class ResetpasswordPage {\n    constructor(util, router,\n    // Inject Router\n    route // To retrieve user_id passed from the OTP page\n    ) {\n      this.util = util;\n      this.router = router;\n      this.route = route;\n      this.userid = '';\n      this.password = '';\n      this.confirmNewPassword = '';\n      this.reset = false;\n      this.data = [];\n    }\n    ionViewWillEnter() {\n      this.route.queryParams.subscribe(params => {\n        this.userid = params['user_id'];\n      });\n    }\n    resetpassword() {\n      if (this.password == '' || this.confirmNewPassword == '') {\n        this.util.presentToast('Password and Confirm Password is Required.');\n        return;\n      } else {\n        this.reset = true;\n        const data = {\n          user_id: this.userid,\n          new_password: this.password,\n          confirm_new_password: this.confirmNewPassword\n        };\n        this.util.post('resetPassword', data).subscribe({\n          next: response => {\n            if (response.status == 'success') {\n              this.reset = false;\n              this.util.presentToast('Password reset successfully.');\n              this.data = response.data;\n              console.log('Data:', this.data);\n              this.router.navigate(['/login']);\n            } else {\n              this.util.presentToast('An Error Occurred. Please try Again.');\n            }\n          },\n          error: err => {\n            this.reset = false;\n            console.error('Error occurred:', err);\n            this.util.presentToast('An error occurred while resetting the password. Try again.');\n          }\n        });\n      }\n    }\n    static #_ = (() => this.ɵfac = function ResetpasswordPage_Factory(t) {\n      return new (t || ResetpasswordPage)(i0.ɵɵdirectiveInject(i1.UtilService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n    })();\n    static #_2 = (() => this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ResetpasswordPage,\n      selectors: [[\"app-resetpassword\"]],\n      decls: 17,\n      vars: 5,\n      consts: [[3, \"translucent\"], [3, \"fullscreen\"], [1, \"container\"], [\"color\", \"tertiary\", 4, \"ngIf\"], [\"position\", \"floating\"], [\"type\", \"password\", \"required\", \"\", 3, \"ngModelChange\", \"ngModel\"], [\"expand\", \"block\", 3, \"click\"], [\"color\", \"tertiary\"]],\n      template: function ResetpasswordPage_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-title\");\n          i0.ɵɵtext(3, \"ResetPassword\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(4, \"ion-content\", 1)(5, \"div\", 2);\n          i0.ɵɵtemplate(6, ResetpasswordPage_ion_spinner_6_Template, 1, 0, \"ion-spinner\", 3);\n          i0.ɵɵelementStart(7, \"ion-item\")(8, \"ion-label\", 4);\n          i0.ɵɵtext(9, \"New Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"ion-input\", 5);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function ResetpasswordPage_Template_ion_input_ngModelChange_10_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.password, $event) || (ctx.password = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(11, \"ion-item\")(12, \"ion-label\", 4);\n          i0.ɵɵtext(13, \"Confirm New Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"ion-input\", 5);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function ResetpasswordPage_Template_ion_input_ngModelChange_14_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.confirmNewPassword, $event) || (ctx.confirmNewPassword = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(15, \"ion-button\", 6);\n          i0.ɵɵlistener(\"click\", function ResetpasswordPage_Template_ion_button_click_15_listener() {\n            return ctx.resetPassword();\n          });\n          i0.ɵɵtext(16, \" Reset Password \");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"translucent\", true);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"fullscreen\", true);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.reset);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.password);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.confirmNewPassword);\n        }\n      },\n      dependencies: [i3.NgIf, i4.NgControlStatus, i4.RequiredValidator, i4.NgModel, i5.IonButton, i5.IonContent, i5.IonHeader, i5.IonInput, i5.IonItem, i5.IonLabel, i5.IonSpinner, i5.IonTitle, i5.IonToolbar, i5.TextValueAccessor]\n    }))();\n  }\n  return ResetpasswordPage;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _asyncToGenerator from \"D:/ionic-ecommerce-app-master/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"@angular/router\";\nexport let UtilService = /*#__PURE__*/(() => {\n  class UtilService {\n    constructor(http, loadingCtrl, toastController, router) {\n      this.http = http;\n      this.loadingCtrl = loadingCtrl;\n      this.toastController = toastController;\n      this.router = router;\n      this.isMenuEnabled = new Subject();\n      this.baseUrl = 'http://localhost/wordpressdoc/wordpress/'; // Update this with your actual WordPress site URL\n      this.url = '  http://localhost/wordpressdoc/wordpress/wp-json/addapi/v1/';\n    }\n    // Creating method to handle Side Menu State (Enabled or Disabeld)\n    setMenuState(enabled) {\n      this.isMenuEnabled.next(enabled);\n    }\n    // Method for get the Menu State\n    getMenuState() {\n      return this.isMenuEnabled;\n    }\n    loginUrl(data) {\n      return this.http.post(this.baseUrl + 'wp-json/jwt-auth/v1/token', data);\n    }\n    post(endpoint, data) {\n      return this.http.post(this.url + endpoint, data);\n    }\n    sendData(endPoint, data, token) {\n      let headers = {};\n      if (token) {\n        headers = {\n          \"Authorization\": \"Bearer \" + token,\n          \"Content-Type\": \"application/json\"\n        };\n      }\n      return this.http.post(this.url + endPoint, data, {\n        headers: headers\n      }).pipe(map(result => result));\n    }\n    checkUser() {\n      const userData = localStorage.getItem('login');\n      if (userData) {\n        return true; // Data is available, allow navigation\n      } else {\n        this.router.navigate(['/login']); // Redirect to login page\n        this.presentToast('Not Authenticated');\n        return false; // Prevent navigation\n      }\n    }\n    showLoading() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.loader = yield _this.loadingCtrl.create({\n          message: 'Loading...',\n          duration: 0,\n          spinner: 'circles'\n        });\n        yield _this.loader.present();\n      })();\n    }\n    hideLoader() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        if (_this2.loader) {\n          yield _this2.loader.dismiss();\n        }\n      })();\n    }\n    presentToast(msg) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        const toast = yield _this3.toastController.create({\n          message: msg,\n          duration: 1500,\n          position: 'bottom'\n        });\n        yield toast.present();\n      })();\n    }\n    canActivate(route, state) {\n      return this.checkUser();\n    }\n    static #_ = (() => this.ɵfac = function UtilService_Factory(t) {\n      return new (t || UtilService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LoadingController), i0.ɵɵinject(i2.ToastController), i0.ɵɵinject(i3.Router));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UtilService,\n      factory: UtilService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return UtilService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
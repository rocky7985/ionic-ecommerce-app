{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../util.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@ionic/angular\";\nconst _c0 = [\"profileFormElement\"];\nfunction UpdatecardinfoPage_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵelement(1, \"ion-spinner\", 8);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdatecardinfoPage_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 9, 0)(2, \"form\", 10);\n    i0.ɵɵlistener(\"ngSubmit\", function UpdatecardinfoPage_div_9_Template_form_ngSubmit_2_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.getUpdatedData());\n    });\n    i0.ɵɵelementStart(3, \"ion-item\")(4, \"ion-label\", 11);\n    i0.ɵɵtext(5, \"Card Number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"ion-input\", 12);\n    i0.ɵɵlistener(\"ionInput\", function UpdatecardinfoPage_div_9_Template_ion_input_ionInput_6_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.formatCardNumber($event));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"ion-item\")(8, \"ion-label\", 11);\n    i0.ɵɵtext(9, \"Expiry Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"ion-input\", 13);\n    i0.ɵɵlistener(\"ionInput\", function UpdatecardinfoPage_div_9_Template_ion_input_ionInput_10_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.formatExpiryDate($event));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"ion-item\")(12, \"ion-label\", 11);\n    i0.ɵɵtext(13, \"CVV\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(14, \"ion-input\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"ion-item\")(16, \"ion-label\", 11);\n    i0.ɵɵtext(17, \"Card Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(18, \"ion-input\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"ion-button\", 16);\n    i0.ɵɵtext(20, \"Update Card\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.updateCard);\n    i0.ɵɵadvance(17);\n    i0.ɵɵproperty(\"disabled\", !ctx_r1.updateCard.valid);\n  }\n}\nexport let UpdatecardinfoPage = /*#__PURE__*/(() => {\n  class UpdatecardinfoPage {\n    constructor(util, router, route) {\n      this.util = util;\n      this.router = router;\n      this.route = route;\n      this.loginUser = [];\n      this.updatedData = [];\n      this.loadProfileData = true;\n      this.updateCard = new FormGroup({\n        card_num: new FormControl('', [Validators.required, Validators.pattern(/^(\\d{4} ?){3}\\d{4}$/)]),\n        exp_date: new FormControl('', [Validators.required, Validators.pattern(/^(0[1-9]|1[0-2])\\/\\d{2}$/)]),\n        cvv: new FormControl('', [Validators.required, Validators.pattern(/^\\d{3}$/)]),\n        card_name: new FormControl('', Validators.required)\n      });\n    }\n    ionViewWillEnter() {\n      this.getLoginUser();\n      this.route.queryParams.subscribe(params => {\n        const cardId = params['card_id'];\n        if (cardId) {\n          this.getCardData(cardId); // Pass the card ID to the method\n        }\n      });\n      this.profileFormElement.nativeElement.addEventListener('touchstart', this.handleTouchStart, {\n        passive: true\n      });\n    }\n    getLoginUser() {\n      let user = JSON.parse(localStorage.getItem('login'));\n      if (user != null) {\n        this.loginUser = user;\n      }\n    }\n    handleTouchStart(event) {\n      console.log('Touch start event:', event);\n    }\n    formatCardNumber(event) {\n      let input = event.target.value.replace(/\\D/g, '').substring(0, 16); // Remove non-digits and limit to 16 digits\n      if (input.length > 0) {\n        input = input.match(/.{1,4}/g)?.join(' ') || ''; // Add space every 4 digits\n      }\n      this.updateCard.controls['card_num'].setValue(input);\n    }\n    formatExpiryDate(event) {\n      let input = event.target.value.replace(/\\D/g, '').substring(0, 4); // Remove non-digits and limit to 6 digits\n      if (input.length >= 2) {\n        input = input.substring(0, 2) + '/' + input.substring(2, 4); // Add slash after MM\n      }\n      this.updateCard.controls['exp_date'].setValue(input);\n    }\n    getCardData(cardId) {\n      const login = JSON.parse(localStorage.getItem('login'));\n      const logindata = login.token;\n      this.util.sendData('savedcards', {\n        card_id: cardId\n      }, logindata).subscribe({\n        next: p => {\n          if (p.status == 'success') {\n            const card = p.data.find(c => c.id == cardId); // Find the specific card by ID\n            console.log('p.data:', card);\n            // this.cardId = card.id;   // Store the card ID for the update\n            // console.log('Card ID:', this.cardId);\n            if (card) {\n              this.cardId = card.id; // Correctly assign cardId\n              const formattedCardNum = card.card_num.replace(/\\D/g, '').match(/.{1,4}/g)?.join(' ') || '';\n              this.updateCard.patchValue({\n                card_num: formattedCardNum,\n                exp_date: card.exp_date || '',\n                cvv: card.cvv || '',\n                card_name: card.card_name || ''\n              });\n            } else {\n              console.error('Card not found with the given ID');\n            }\n          } else {\n            console.error('Failed to retrieve card data');\n          }\n          this.loadProfileData = false;\n        },\n        error: () => {\n          console.log('Error loading card');\n          this.loadProfileData = false;\n        }\n      });\n    }\n    getUpdatedData() {\n      if (this.updateCard.valid) {\n        this.loadProfileData = true; // Start spinner\n        // Construct the payload with necessary fields\n        const updatedData = {\n          id: this.cardId,\n          // Ensure this is the correct card ID\n          card_num: this.updateCard.value.card_num.replace(/\\s+/g, ''),\n          // Remove spaces\n          exp_date: this.updateCard.value.exp_date,\n          cvv: this.updateCard.value.cvv,\n          card_name: this.updateCard.value.card_name\n        };\n        console.log('Updated Data:', updatedData);\n        const login = JSON.parse(localStorage.getItem('login'));\n        const logindata = login.token;\n        this.util.sendData('updatecardinfo', updatedData, logindata).subscribe({\n          next: p => {\n            if (p.status == 'success') {\n              this.updatedData = p.data;\n              console.log('Card Updated Data:', p.data);\n              this.util.presentToast('Carddata Updated');\n            } else {\n              console.error('Failed to update card:', p.message);\n              this.util.presentToast('Failed to update card');\n            }\n            this.loadProfileData = false;\n          },\n          error: error => {\n            console.error('Error updating card:', error);\n            this.util.presentToast('Error updating card');\n            this.loadProfileData = false;\n          }\n        });\n      } else {\n        console.log('Form is invalid:', this.updateCard.invalid);\n      }\n    }\n    static #_ = (() => this.ɵfac = function UpdatecardinfoPage_Factory(t) {\n      return new (t || UpdatecardinfoPage)(i0.ɵɵdirectiveInject(i1.UtilService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n    })();\n    static #_2 = (() => this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: UpdatecardinfoPage,\n      selectors: [[\"app-updatecardinfo\"]],\n      viewQuery: function UpdatecardinfoPage_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.profileFormElement = _t.first);\n        }\n      },\n      decls: 10,\n      vars: 2,\n      consts: [[\"profileFormElement\", \"\"], [\"slot\", \"start\"], [\"color\", \"primary\", \"routerLink\", \"/savedcards\", \"routerDirection\", \"back\", 1, \"backbtn\"], [\"src\", \"../../assets/back-dark.svg\"], [1, \"title\"], [\"class\", \"spinner-container\", 4, \"ngIf\"], [\"class\", \"profile-info\", 4, \"ngIf\"], [1, \"spinner-container\"], [\"color\", \"primary\"], [1, \"profile-info\"], [3, \"ngSubmit\", \"formGroup\"], [\"position\", \"floating\"], [\"formControlName\", \"card_num\", \"maxlength\", \"19\", \"inputmode\", \"numeric\", 3, \"ionInput\"], [\"formControlName\", \"exp_date\", \"maxlength\", \"6\", 3, \"ionInput\"], [\"formControlName\", \"cvv\", \"maxlength\", \"3\", \"inputmode\", \"numeric\"], [\"formControlName\", \"card_name\"], [\"expand\", \"full\", \"type\", \"submit\", 1, \"update\", 3, \"disabled\"]],\n      template: function UpdatecardinfoPage_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-buttons\", 1)(3, \"ion-button\", 2);\n          i0.ɵɵelement(4, \"img\", 3);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(5, \"ion-title\", 4);\n          i0.ɵɵtext(6, \"Update Card\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(7, \"ion-content\");\n          i0.ɵɵtemplate(8, UpdatecardinfoPage_div_8_Template, 2, 0, \"div\", 5)(9, UpdatecardinfoPage_div_9_Template, 21, 2, \"div\", 6);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngIf\", ctx.loadProfileData);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", !ctx.loadProfileData);\n        }\n      },\n      dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatus, i4.NgControlStatusGroup, i4.MaxLengthValidator, i5.IonButton, i5.IonButtons, i5.IonContent, i5.IonHeader, i5.IonInput, i5.IonItem, i5.IonLabel, i5.IonSpinner, i5.IonTitle, i5.IonToolbar, i5.TextValueAccessor, i5.RouterLinkDelegate, i4.FormGroupDirective, i4.FormControlName, i2.RouterLink],\n      styles: [\".page[_ngcontent-%COMP%]   ion-toolbar[_ngcontent-%COMP%]{--background: #fff;--border-color: #ccc}.page[_ngcontent-%COMP%]   ion-title.title[_ngcontent-%COMP%]{font-size:20px;font-weight:700;color:#333}.page[_ngcontent-%COMP%]   .backbtn[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{width:24px;height:24px}.spinner-container[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;height:100vh;background-color:#fffc}.spinner-container[_ngcontent-%COMP%]   ion-spinner[_ngcontent-%COMP%]{width:50px;height:50px}.profile-info[_ngcontent-%COMP%]{padding:16px}.profile-info[_ngcontent-%COMP%]   ion-item[_ngcontent-%COMP%]{--background: transparent;--border-color: #ccc;--border-radius: 8px;margin-bottom:12px}.profile-info[_ngcontent-%COMP%]   ion-item[_ngcontent-%COMP%]   ion-label[_ngcontent-%COMP%]{color:#666}.profile-info[_ngcontent-%COMP%]   ion-item[_ngcontent-%COMP%]   ion-input[_ngcontent-%COMP%]{color:#333;font-size:16px;padding:8px 0}.profile-info[_ngcontent-%COMP%]   ion-button.update[_ngcontent-%COMP%]{--background: #3880ff;--background-focused: #3171e0;--background-hover: #3171e0;--background-activated: #3171e0;--border-radius: 8px;margin-top:24px}.profile-info[_ngcontent-%COMP%]   ion-button[disabled][_ngcontent-%COMP%]{opacity:.5}@media (max-width: 768px){.profile-info[_ngcontent-%COMP%]{padding:8px}.profile-info[_ngcontent-%COMP%]   ion-item[_ngcontent-%COMP%]   ion-input[_ngcontent-%COMP%]{font-size:14px}.profile-info[_ngcontent-%COMP%]   ion-button.update[_ngcontent-%COMP%]{font-size:14px}}\"]\n    }))();\n  }\n  return UpdatecardinfoPage;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
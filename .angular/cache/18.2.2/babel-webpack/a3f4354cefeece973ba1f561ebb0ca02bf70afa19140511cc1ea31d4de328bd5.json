{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { forkJoin } from 'rxjs'; // Import forkJoin from RxJS\nimport { tap } from 'rxjs/operators'; // Import tap from RxJS operators\nlet HomePage = class HomePage {\n  // favouritepost: any = [];\n  constructor(data, util, router // Inject Router\n  ) {\n    this.data = data;\n    this.util = util;\n    this.router = router;\n    this.isOpen = false;\n    this.categories = [];\n    this.featuredProducts = [];\n    this.bestSellProducts = [];\n    this.searchPost = '';\n    this.loadingCategories = true; // Added for loading state\n    this.loadingFeatured = true; // Added for loading state\n    this.loadingBestSell = true; // Added for loading state\n    this.selectedFilter = ''; // Default filter\n    this.listProducts = [];\n    this.loginUser = [];\n  }\n  ionViewWillEnter() {\n    this.getLoginUser();\n    this.getCategories();\n    this.getpost();\n    this.getBestSell();\n  }\n  getLoginUser() {\n    let user = JSON.parse(localStorage.getItem('login'));\n    if (user != null) {\n      this.loginUser = user;\n    }\n  }\n  // getpost() {\n  //   const login = JSON.parse(localStorage.getItem('login'));\n  //   const logindata = login.token;\n  //   this.util.sendData('getShopData', {}, logindata).subscribe({\n  //     next: (p: any) => {\n  //       if (p.status == 'success') {\n  //         this.featuredProducts = p.data.slice(0, 3);  // Assuming 'p.data' contains the products\n  //         // Check if products are in favourites and update the UI accordingly\n  //         this.featuredProducts.forEach((product: any) => {\n  //           const data = {\n  //             user_id: this.loginUser.id,\n  //             post_id: product.Id\n  //           }\n  //           this.util.sendData('checkFavourite', data, logindata).subscribe({\n  //             next: (response: any) => {\n  //               product.isFavourite = response.message == 'Product is in favourites';\n  //             }\n  //           });\n  //         });\n  //         console.log('FeaturedProducts', this.featuredProducts);\n  //       }\n  //       this.loadingFeatured = false;  // Turn off loading spinner\n  //     }, error: () => {\n  //       this.loadingFeatured = false;  // Turn off loading spinner on error\n  //     }\n  //   });\n  // }\n  getpost() {\n    const login = JSON.parse(localStorage.getItem('login'));\n    const logindata = login.token;\n    this.util.sendData('getShopData', {}, logindata).subscribe({\n      next: p => {\n        if (p.status == 'success') {\n          this.featuredProducts = p.data.slice(0, 3); // Assuming 'p.data' contains the products\n          // Array to hold the observable checks for favourites\n          const favouriteChecks = this.featuredProducts.map(product => {\n            const data = {\n              user_id: this.loginUser.id,\n              post_id: product.Id\n            };\n            return this.util.sendData('checkFavourite', data, logindata).pipe(tap(response => {\n              product.isFavourite = response.message === 'Product is in favourites';\n            }));\n          });\n          // Wait for all favourite checks to complete\n          forkJoin(favouriteChecks).subscribe({\n            next: () => {\n              this.loadingFeatured = false; // Turn off loading spinner after all checks are done\n              console.log('FeaturedProducts', this.featuredProducts);\n            },\n            error: () => {\n              this.loadingFeatured = false; // Turn off loading spinner on error\n            }\n          });\n        } else {\n          this.loadingFeatured = false; // Turn off loading spinner if fetching products fails\n        }\n      },\n      error: () => {\n        this.loadingFeatured = false; // Turn off loading spinner on error\n      }\n    });\n  }\n  navigateToItemDetails(id) {\n    this.router.navigate(['/item-details', id]);\n  }\n  getCategories() {\n    const login = JSON.parse(localStorage.getItem('login'));\n    const logindata = login.token;\n    this.util.sendData('getCategory', {}, logindata).subscribe({\n      next: p => {\n        if (p.data.categories) {\n          this.categories = [];\n          p.data.categories.forEach(category => {\n            // Initialize categories array\n            if (category == 'Womens') {\n              this.categories.push({\n                name: 'Womens',\n                image: '../../assets/categories/category-1.png',\n                action: () => this.navigateToCategory('Womens')\n              });\n            } else if (category == 'Mens') {\n              this.categories.push({\n                name: 'Mens',\n                image: '../../assets/categories/category-2.png',\n                action: () => this.navigateToCategory('Mens')\n              });\n            }\n          });\n          console.log('Categories', this.categories);\n        }\n        this.loadingCategories = false; // Turn off loading spinner\n      },\n      error: () => {\n        this.loadingCategories = false; // Turn off loading spinner\n      }\n    });\n  }\n  getBestSell() {\n    const login = JSON.parse(localStorage.getItem('login'));\n    const logindata = login.token;\n    this.util.sendData('getBestSell', {}, logindata).subscribe({\n      next: p => {\n        if (p.status == 'success' && p.data) {\n          this.bestSellProducts = p.data.slice(0, 3);\n          console.log('BestSell', this.bestSellProducts);\n        }\n        this.loadingBestSell = false;\n      },\n      error: () => {\n        this.loadingBestSell = false;\n      }\n    });\n  }\n  navigateToCategory(category) {\n    this.router.navigate(['/post-category', {\n      category\n    }]); // Pass the category as a parameter\n  }\n  navigateToSeeAll(context) {\n    this.router.navigate(['/see-all-posts', {\n      context\n    }]);\n  }\n  search() {\n    let filterTask = [];\n    if (this.selectedFilter == 'Featured')\n      // checks all whitespaces and occurrences in the string\n      {\n        filterTask = this.featuredProducts.filter(s => s.title.toLowerCase().includes(this.searchPost.toLowerCase()));\n      } else if (this.selectedFilter == 'Categories')\n      // checks all whitespaces and occurrences in the string\n      {\n        filterTask = this.categories.filter(s => s.name.toLowerCase().includes(this.searchPost.toLowerCase()));\n      } else if (this.selectedFilter == 'Best Sell')\n      // checks all whitespaces and occurrences in the string\n      {\n        filterTask = this.bestSellProducts.filter(s => s.title.toLowerCase().includes(this.searchPost.toLowerCase()));\n      }\n    this.listProducts = filterTask.length ? filterTask : [];\n    console.log('Search Results:', this.listProducts);\n  }\n  onFilterChange(filter) {\n    this.selectedFilter = filter;\n    this.search(); // Trigger search with new filter\n    this.isOpen = false; // Close the popover after selection\n  }\n  presentPopover(e) {\n    console.log('Popver', e.target);\n    this.popover.event = e; // Set the event for the popover\n    this.isOpen = true;\n  }\n  onClearSearch() {\n    this.searchPost = '';\n    this.ionViewWillEnter(); // Reload the default data\n  }\n  addToFavourites(postid) {\n    const token = this.loginUser.token;\n    const productIndex = this.featuredProducts.findIndex(product => product.Id == postid);\n    if (productIndex !== -1) {\n      const product = this.featuredProducts[productIndex];\n      product.isFavourite = !product.isFavourite;\n      const data = {\n        user_id: this.loginUser.user_id,\n        post_id: postid\n      };\n      this.util.sendData('favourites', data, token).subscribe({\n        next: response => {\n          if (response.status == 'success') {\n            console.log(response.message);\n          } else {\n            product.isFavourite = !product.isFavourite;\n            console.log('An Error Occurred. Try Again');\n          }\n        },\n        error: err => {\n          product.isFavourite = !product.isFavourite;\n          console.log('Error Occurred:', err);\n        }\n      });\n    }\n  }\n};\n__decorate([ViewChild('popover')], HomePage.prototype, \"popover\", void 0);\nHomePage = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.page.html',\n  styleUrls: ['./home.page.scss']\n})], HomePage);\nexport { HomePage };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
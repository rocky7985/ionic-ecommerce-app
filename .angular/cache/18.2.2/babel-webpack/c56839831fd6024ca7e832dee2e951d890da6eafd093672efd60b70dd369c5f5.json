{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../util.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@ionic/angular\";\nimport * as i4 from \"@angular/router\";\nexport let ConfirmPage = /*#__PURE__*/(() => {\n  class ConfirmPage {\n    constructor(util) {\n      this.util = util;\n      this.loginUser = [];\n      this.cardData = [];\n      this.loadProfileData = true;\n      this.addcard = new FormGroup({\n        cardnumber: new FormControl('', [Validators.required, Validators.pattern(/^(\\d{4} ?){3}\\d{4}$/)]),\n        expiryDate: new FormControl('', [Validators.required, Validators.pattern(/^(0[1-9]|1[0-2])\\/\\d{2}$/)]),\n        cvv: new FormControl('', [Validators.required, Validators.pattern(/^\\d{3}$/)]),\n        cardname: new FormControl('', Validators.required)\n      });\n    }\n    ionViewWillEnter() {\n      this.getLoginUser();\n      // this.saveCardData();\n    }\n    getLoginUser() {\n      let user = JSON.parse(localStorage.getItem('login'));\n      if (user != null) {\n        this.loginUser = user;\n      }\n    }\n    formatCardNumber(event) {\n      let input = event.target.value.replace(/\\D/g, '').substring(0, 16); // Remove non-digits and limit to 16 digits\n      if (input.length > 0) {\n        input = input.match(/.{1,4}/g)?.join(' ') || ''; // Add space every 4 digits\n      }\n      this.addcard.controls['cardnumber'].setValue(input);\n    }\n    formatExpiryDate(event) {\n      let input = event.target.value.replace(/\\D/g, '').substring(0, 4); // Remove non-digits and limit to 6 digits\n      if (input.length >= 2) {\n        input = input.substring(0, 2) + '/' + input.substring(2, 4); // Add slash after MM\n      }\n      this.addcard.controls['expiryDate'].setValue(input);\n    }\n    saveCardData() {\n      if (this.addcard.valid) {\n        this.loadProfileData = true; // Start spinner\n        const token = this.loginUser.token;\n        const userId = this.loginUser.id; // Ensure you have user_id\n        const usercardData = {\n          user_id: userId,\n          card_num: this.addcard.get('cardnumber')?.value.replace(/\\s+/g, ''),\n          // Remove spaces before sending\n          exp_date: this.addcard.get('expiryDate')?.value,\n          cvv: this.addcard.get('cvv')?.value,\n          card_name: this.addcard.get('cardname')?.value\n        };\n        this.util.sendData('addcard', usercardData, token).subscribe({\n          next: p => {\n            if (p.status == 'success') {\n              this.cardData = p.data;\n              this.util.presentToast('Card Added Successfully');\n              console.log('Usercard Data:', this.cardData);\n              this.addcard.reset(); // Reset the form after successful submission\n            } else {\n              this.util.presentToast(p.message || 'Failed to add card details');\n            }\n            this.loadProfileData = false;\n          },\n          error: () => {\n            this.loadProfileData = false;\n            this.util.presentToast('An error occurred. Please try again.');\n          }\n        });\n      } else {\n        console.log('Error:', this.addcard.invalid);\n      }\n    }\n    static #_ = (() => this.ɵfac = function ConfirmPage_Factory(t) {\n      return new (t || ConfirmPage)(i0.ɵɵdirectiveInject(i1.UtilService));\n    })();\n    static #_2 = (() => this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ConfirmPage,\n      selectors: [[\"app-confirm\"]],\n      decls: 30,\n      vars: 1,\n      consts: [[\"slot\", \"start\"], [\"color\", \"primary\", \"routerLink\", \"/checkout\", \"routerDirection\", \"back\", 1, \"backbtn\"], [\"src\", \"../../assets/back-dark.svg\"], [1, \"title\"], [1, \"card-info\"], [3, \"ngSubmit\", \"formGroup\"], [\"position\", \"floating\"], [\"formControlName\", \"cardname\"], [\"formControlName\", \"cardnumber\", \"maxlength\", \"19\", \"inputmode\", \"numeric\", 3, \"ionInput\"], [\"formControlName\", \"expiryDate\", \"maxlength\", \"5\", \"inputmode\", \"numeric\", 3, \"ionInput\"], [\"formControlName\", \"cvv\", \"maxlength\", \"3\", \"inputmode\", \"numeric\"], [\"expand\", \"full\", \"type\", \"submit\", 1, \"addcard\"], [\"expand\", \"full\", \"type\", \"submit\", \"color\", \"warning\", \"routerLink\", \"/savedcards\", 1, \"addcard\"]],\n      template: function ConfirmPage_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-buttons\", 0)(3, \"ion-button\", 1);\n          i0.ɵɵelement(4, \"img\", 2);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(5, \"ion-title\", 3);\n          i0.ɵɵtext(6, \"Add Card\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(7, \"ion-content\")(8, \"div\", 4)(9, \"form\", 5);\n          i0.ɵɵlistener(\"ngSubmit\", function ConfirmPage_Template_form_ngSubmit_9_listener() {\n            return ctx.saveCardData();\n          });\n          i0.ɵɵelementStart(10, \"ion-item\")(11, \"ion-label\", 6);\n          i0.ɵɵtext(12, \"Card Holder Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(13, \"ion-input\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"ion-item\")(15, \"ion-label\", 6);\n          i0.ɵɵtext(16, \"Card Number\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(17, \"ion-input\", 8);\n          i0.ɵɵlistener(\"ionInput\", function ConfirmPage_Template_ion_input_ionInput_17_listener($event) {\n            return ctx.formatCardNumber($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(18, \"ion-item\")(19, \"ion-label\", 6);\n          i0.ɵɵtext(20, \"Expiry Date\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(21, \"ion-input\", 9);\n          i0.ɵɵlistener(\"ionInput\", function ConfirmPage_Template_ion_input_ionInput_21_listener($event) {\n            return ctx.formatExpiryDate($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(22, \"ion-item\")(23, \"ion-label\", 6);\n          i0.ɵɵtext(24, \"CVV\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(25, \"ion-input\", 10);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(26, \"ion-button\", 11);\n          i0.ɵɵtext(27, \"Add Card\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(28, \"ion-button\", 12);\n          i0.ɵɵtext(29, \"Go to Saves Cards\");\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"formGroup\", ctx.addcard);\n        }\n      },\n      dependencies: [i2.ɵNgNoValidate, i2.NgControlStatus, i2.NgControlStatusGroup, i2.MaxLengthValidator, i3.IonButton, i3.IonButtons, i3.IonContent, i3.IonHeader, i3.IonInput, i3.IonItem, i3.IonLabel, i3.IonTitle, i3.IonToolbar, i3.TextValueAccessor, i3.RouterLinkDelegate, i2.FormGroupDirective, i2.FormControlName, i4.RouterLink],\n      styles: [\".backbtn[_ngcontent-%COMP%]{margin-left:15px}.title[_ngcontent-%COMP%]{margin-top:0;color:#434343}.card-info[_ngcontent-%COMP%]{padding:20px 15px 0}.card-info[_ngcontent-%COMP%]   ion-item[_ngcontent-%COMP%]{--padding-start: 0;--border-color: #97979713}.card-info[_ngcontent-%COMP%]   ion-item[_ngcontent-%COMP%]   ion-label[_ngcontent-%COMP%]{color:#919191;font-size:larger}.card-info[_ngcontent-%COMP%]   ion-item[_ngcontent-%COMP%]   ion-input[_ngcontent-%COMP%]{--color: #434343}.card-info[_ngcontent-%COMP%]   .addcard[_ngcontent-%COMP%]   ion-button[_ngcontent-%COMP%]{margin:0}.spinner-container[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;height:100vh}\"]\n    }))();\n  }\n  return ConfirmPage;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
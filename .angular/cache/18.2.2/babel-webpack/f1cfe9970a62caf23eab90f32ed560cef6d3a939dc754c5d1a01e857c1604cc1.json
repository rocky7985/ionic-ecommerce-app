{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../util.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@ionic/angular\";\nfunction UpdateAddressPage_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵelement(1, \"ion-spinner\", 7);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateAddressPage_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 8)(1, \"form\", 9);\n    i0.ɵɵlistener(\"ngSubmit\", function UpdateAddressPage_div_9_Template_form_ngSubmit_1_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.updatedAddress());\n    });\n    i0.ɵɵelementStart(2, \"ion-item\")(3, \"ion-label\", 10);\n    i0.ɵɵtext(4, \"Address\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"ion-input\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"ion-item\")(7, \"ion-label\", 10);\n    i0.ɵɵtext(8, \"Location\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(9, \"ion-input\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"ion-button\", 13);\n    i0.ɵɵtext(11, \"Update Address\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.updateForm);\n    i0.ɵɵadvance(9);\n    i0.ɵɵproperty(\"disabled\", !ctx_r1.updateForm.valid);\n  }\n}\nexport let UpdateAddressPage = /*#__PURE__*/(() => {\n  class UpdateAddressPage {\n    constructor(util, router, route) {\n      this.util = util;\n      this.router = router;\n      this.route = route;\n      this.loginUser = [];\n      this.updatedData = [];\n      this.loadData = true;\n      this.updateForm = new FormGroup({\n        address: new FormControl('', Validators.required),\n        location: new FormControl('', Validators.required)\n      });\n    }\n    ionViewWillEnter() {\n      this.getLoginUser();\n      this.getAddressData();\n    }\n    getLoginUser() {\n      const user = JSON.parse(localStorage.getItem('login'));\n      if (user !== null) {\n        this.loginUser = user;\n      }\n    }\n    getAddressData() {\n      const addressId = this.route.snapshot.queryParamMap.get('id'); // Get address ID from query params\n      const token = this.loginUser.token;\n      if (addressId) {\n        this.util.sendData('savedaddress', {\n          id: addressId\n        }, token).subscribe({\n          next: p => {\n            if (p.status == 'success') {\n              const data = p.data;\n              this.updateForm.patchValue({\n                address: data.address,\n                location: data.location\n              });\n              console.log('Address Data:', data);\n            }\n            this.loadData = false;\n          },\n          error: () => {\n            console.log('Error loading address');\n            this.loadData = false;\n          }\n        });\n      }\n    }\n    updatedAddress() {\n      if (this.updateForm.valid) {\n        this.loadData = true;\n        const data = {\n          ...this.updateForm.value,\n          id: this.route.snapshot.queryParamMap.get('id')\n        };\n        const token = this.loginUser.token;\n        this.util.sendData('update_address', data, token).subscribe({\n          next: p => {\n            if (p.status == 'success') {\n              console.log('Updated Address Data:', p.data);\n              this.util.presentToast('Address Updated');\n              // this.router.navigate(['/checkout']);\n            }\n            this.loadData = false;\n          },\n          error: () => {\n            this.loadData = false;\n            console.log('Failed to update data');\n          }\n        });\n      } else {\n        console.log('Error:', this.updateForm.invalid);\n      }\n    }\n    static #_ = (() => this.ɵfac = function UpdateAddressPage_Factory(t) {\n      return new (t || UpdateAddressPage)(i0.ɵɵdirectiveInject(i1.UtilService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n    })();\n    static #_2 = (() => this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: UpdateAddressPage,\n      selectors: [[\"app-update-address\"]],\n      decls: 10,\n      vars: 2,\n      consts: [[\"slot\", \"start\"], [\"color\", \"primary\", \"routerLink\", \"/checkout\", \"routerDirection\", \"back\", 1, \"backbtn\"], [\"src\", \"../../assets/back-dark.svg\"], [1, \"title\"], [\"class\", \"spinner-container\", 4, \"ngIf\"], [\"class\", \"address-info\", 4, \"ngIf\"], [1, \"spinner-container\"], [\"color\", \"primary\"], [1, \"address-info\"], [3, \"ngSubmit\", \"formGroup\"], [\"position\", \"floating\"], [\"formControlName\", \"address\"], [\"formControlName\", \"location\"], [\"expand\", \"full\", \"type\", \"update\", 1, \"update\", 3, \"disabled\"]],\n      template: function UpdateAddressPage_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-buttons\", 0)(3, \"ion-button\", 1);\n          i0.ɵɵelement(4, \"img\", 2);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(5, \"ion-title\", 3);\n          i0.ɵɵtext(6, \"Update Address\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(7, \"ion-content\");\n          i0.ɵɵtemplate(8, UpdateAddressPage_div_8_Template, 2, 0, \"div\", 4)(9, UpdateAddressPage_div_9_Template, 12, 2, \"div\", 5);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngIf\", ctx.loadData);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", !ctx.loadData);\n        }\n      },\n      dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatus, i4.NgControlStatusGroup, i5.IonButton, i5.IonButtons, i5.IonContent, i5.IonHeader, i5.IonInput, i5.IonItem, i5.IonLabel, i5.IonSpinner, i5.IonTitle, i5.IonToolbar, i5.TextValueAccessor, i5.RouterLinkDelegate, i4.FormGroupDirective, i4.FormControlName, i2.RouterLink]\n    }))();\n  }\n  return UpdateAddressPage;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}